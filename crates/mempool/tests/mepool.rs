#[cfg(test)]
mod test_mempool {
    use bundler_types::user_operation::UserOperation;
    use ethers::types::Address;
    use mempool::{Mempool, MempoolService};
    use std::str::FromStr;

    fn init() {
        let _ = env_logger::builder().is_test(true).try_init();
    }

    #[tokio::test]
    async fn test_insert_user_ops() {
        init();
        let ep_addr = Address::from_str("0x0576a174d229e3cfa37253523e645a78a0c91b57").unwrap();

        let user_ops_1 = UserOperation::new(
            "0x9c98b1528c26cf36e78527308c1b21d89baed700",
            "1",
            "0x",
            "0x940d3c600000000000000000000000004648a43b2c14da09fdf82b161150d3f634f40491000000000000000000000000000000000000000000000000002386f26fc100000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002843593564c000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000006449438400000000000000000000000000000000000000000000000000000000000000020b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000002386f26fc1000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000002386f26fc100000000000000000000000000000000000000000000000000001396d8984a3aa6af00000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002bb4fbf271143f4fbf7b91a5ded31805e42b2208d60001f41f9840a85d5af5bf1d1762f925bdaddc4201f98400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
            "356496",
            "55904",
            "55904",
            "131674005360",
            "1",
            "0x3b912be0270b59143985cc5c6aab452d99e2b4bb0000000000000000000000000000000000000000000000000000000064493ee50000000000000000000000000000000000000000000000000000000000000000864797bf1ae6b7e936b0af45f5f17ffda6c0fbc5189b6a19d0fb44ff0f37c15730d47efbff0079bd629f4d3dd09bf136226db30e11c58843cebb4b20f024de101b",
            "0x981c39ab076c5400c830a57e5e711443221085978dea4d343b413b50a1c841c7244c5a10295c89367c7d4acbe7451ab916d537fc61a1ac1ccda26b61e0137b761b",
        ).unwrap();

        let user_ops_2 = UserOperation::new(
            "0x9c98b1528c26cf36e78527308c1b21d89baed700",
            "2",
            "0x",
            "0x940d3c600000000000000000000000004648a43b2c14da09fdf82b161150d3f634f40491000000000000000000000000000000000000000000000000002386f26fc100000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002843593564c000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000006449438400000000000000000000000000000000000000000000000000000000000000020b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000002386f26fc1000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000002386f26fc100000000000000000000000000000000000000000000000000001396d8984a3aa6af00000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002bb4fbf271143f4fbf7b91a5ded31805e42b2208d60001f41f9840a85d5af5bf1d1762f925bdaddc4201f98400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
            "356496",
            "55904",
            "55904",
            "131674005360",
            "2",
            "0x3b912be0270b59143985cc5c6aab452d99e2b4bb0000000000000000000000000000000000000000000000000000000064493ee50000000000000000000000000000000000000000000000000000000000000000864797bf1ae6b7e936b0af45f5f17ffda6c0fbc5189b6a19d0fb44ff0f37c15730d47efbff0079bd629f4d3dd09bf136226db30e11c58843cebb4b20f024de101b",
            "0x981c39ab076c5400c830a57e5e711443221085978dea4d343b413b50a1c841c7244c5a10295c89367c7d4acbe7451ab916d537fc61a1ac1ccda26b61e0137b761b",
        ).unwrap();

        let mempool = Mempool::new(1);

        mempool.push(ep_addr, user_ops_1.clone()).await;
        mempool.push(ep_addr, user_ops_2.clone()).await;

        let res_1 = mempool.pop().await.unwrap();
        let res_2 = mempool.pop().await.unwrap();

        assert_eq!(res_1, user_ops_2);
        assert_eq!(res_2, user_ops_1);
    }
}
