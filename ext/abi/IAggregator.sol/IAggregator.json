{
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "initCode",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "callGasLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "verificationGasLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "preVerificationGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxFeePerGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPriorityFeePerGas",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "paymasterAndData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct UserOperation[]",
          "name": "userOps",
          "type": "tuple[]"
        }
      ],
      "name": "aggregateSignatures",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "aggregatedSignature",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "initCode",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "callGasLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "verificationGasLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "preVerificationGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxFeePerGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPriorityFeePerGas",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "paymasterAndData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct UserOperation[]",
          "name": "userOps",
          "type": "tuple[]"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "validateSignatures",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "initCode",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "callGasLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "verificationGasLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "preVerificationGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxFeePerGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPriorityFeePerGas",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "paymasterAndData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct UserOperation",
          "name": "userOp",
          "type": "tuple"
        }
      ],
      "name": "validateUserOpSignature",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "sigForUserOp",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "aggregateSignatures((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[])": "275e2d79",
    "validateSignatures((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],bytes)": "e3563a4f",
    "validateUserOpSignature((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))": "64c530cd"
  },
  "ast": {
    "absolutePath": "ext/contracts/interfaces/IAggregator.sol",
    "id": 51,
    "exportedSymbols": {
      "IAggregator": [
        50
      ],
      "UserOperation": [
        413
      ],
      "UserOperationLib": [
        518
      ]
    },
    "nodeType": "SourceUnit",
    "src": "36:1581:1",
    "nodes": [
      {
        "id": 18,
        "nodeType": "PragmaDirective",
        "src": "36:24:1",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".12"
        ]
      },
      {
        "id": 19,
        "nodeType": "ImportDirective",
        "src": "62:29:1",
        "nodes": [],
        "absolutePath": "ext/contracts/interfaces/UserOperation.sol",
        "file": "./UserOperation.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 51,
        "sourceUnit": 519,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 50,
        "nodeType": "ContractDefinition",
        "src": "137:1479:1",
        "nodes": [
          {
            "id": 30,
            "nodeType": "FunctionDefinition",
            "src": "307:102:1",
            "nodes": [],
            "documentation": {
              "id": 21,
              "nodeType": "StructuredDocumentation",
              "src": "166:136:1",
              "text": " validate aggregated signature.\n revert if the aggregated signature does not match the given list of operations."
            },
            "functionSelector": "e3563a4f",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "validateSignatures",
            "nameLocation": "316:18:1",
            "parameters": {
              "id": 28,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 25,
                  "mutability": "mutable",
                  "name": "userOps",
                  "nameLocation": "360:7:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 30,
                  "src": "335:32:1",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_UserOperation_$413_calldata_ptr_$dyn_calldata_ptr",
                    "typeString": "struct UserOperation[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 23,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 22,
                        "name": "UserOperation",
                        "nameLocations": [
                          "335:13:1"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 413,
                        "src": "335:13:1"
                      },
                      "referencedDeclaration": 413,
                      "src": "335:13:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_UserOperation_$413_storage_ptr",
                        "typeString": "struct UserOperation"
                      }
                    },
                    "id": 24,
                    "nodeType": "ArrayTypeName",
                    "src": "335:15:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_UserOperation_$413_storage_$dyn_storage_ptr",
                      "typeString": "struct UserOperation[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 27,
                  "mutability": "mutable",
                  "name": "signature",
                  "nameLocation": "384:9:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 30,
                  "src": "369:24:1",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 26,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "369:5:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "334:60:1"
            },
            "returnParameters": {
              "id": 29,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "408:0:1"
            },
            "scope": 50,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 39,
            "nodeType": "FunctionDefinition",
            "src": "997:118:1",
            "nodes": [],
            "documentation": {
              "id": 31,
              "nodeType": "StructuredDocumentation",
              "src": "415:577:1",
              "text": " validate signature of a single userOp\n This method is should be called by bundler after entry_point.simulateValidation() returns (reverts) with ValidationResultWithAggregation\n First it validates the signature over the userOp. Then it returns data to be used when creating the handleOps.\n @param userOp the userOperation received from the user.\n @return sigForUserOp the value to put into the signature field of the userOp when calling handleOps.\n    (usually empty, unless account and aggregator support some kind of \"multisig\""
            },
            "functionSelector": "64c530cd",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "validateUserOpSignature",
            "nameLocation": "1006:23:1",
            "parameters": {
              "id": 35,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 34,
                  "mutability": "mutable",
                  "name": "userOp",
                  "nameLocation": "1053:6:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 39,
                  "src": "1030:29:1",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_UserOperation_$413_calldata_ptr",
                    "typeString": "struct UserOperation"
                  },
                  "typeName": {
                    "id": 33,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 32,
                      "name": "UserOperation",
                      "nameLocations": [
                        "1030:13:1"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 413,
                      "src": "1030:13:1"
                    },
                    "referencedDeclaration": 413,
                    "src": "1030:13:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_UserOperation_$413_storage_ptr",
                      "typeString": "struct UserOperation"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1029:31:1"
            },
            "returnParameters": {
              "id": 38,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 37,
                  "mutability": "mutable",
                  "name": "sigForUserOp",
                  "nameLocation": "1101:12:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 39,
                  "src": "1088:25:1",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 36,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "1088:5:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1087:27:1"
            },
            "scope": 50,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 49,
            "nodeType": "FunctionDefinition",
            "src": "1494:120:1",
            "nodes": [],
            "documentation": {
              "id": 40,
              "nodeType": "StructuredDocumentation",
              "src": "1121:368:1",
              "text": " aggregate multiple signatures into a single value.\n This method is called off-chain to calculate the signature to pass with handleOps()\n bundler MAY use optimized custom code perform this aggregation\n @param userOps array of UserOperations to collect the signatures from.\n @return aggregatedSignature the aggregated signature"
            },
            "functionSelector": "275e2d79",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "aggregateSignatures",
            "nameLocation": "1503:19:1",
            "parameters": {
              "id": 45,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 44,
                  "mutability": "mutable",
                  "name": "userOps",
                  "nameLocation": "1548:7:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 49,
                  "src": "1523:32:1",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_UserOperation_$413_calldata_ptr_$dyn_calldata_ptr",
                    "typeString": "struct UserOperation[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 42,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 41,
                        "name": "UserOperation",
                        "nameLocations": [
                          "1523:13:1"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 413,
                        "src": "1523:13:1"
                      },
                      "referencedDeclaration": 413,
                      "src": "1523:13:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_UserOperation_$413_storage_ptr",
                        "typeString": "struct UserOperation"
                      }
                    },
                    "id": 43,
                    "nodeType": "ArrayTypeName",
                    "src": "1523:15:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_UserOperation_$413_storage_$dyn_storage_ptr",
                      "typeString": "struct UserOperation[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1522:34:1"
            },
            "returnParameters": {
              "id": 48,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 47,
                  "mutability": "mutable",
                  "name": "aggregatedSignature",
                  "nameLocation": "1593:19:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 49,
                  "src": "1580:32:1",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 46,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "1580:5:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1579:34:1"
            },
            "scope": 50,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "IAggregator",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 20,
          "nodeType": "StructuredDocumentation",
          "src": "93:43:1",
          "text": " Aggregated Signatures validator."
        },
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          50
        ],
        "name": "IAggregator",
        "nameLocation": "147:11:1",
        "scope": 51,
        "usedErrors": []
      }
    ],
    "license": "GPL-3.0"
  },
  "id": 1
}